from aiogram.types import Message, CallbackQuery, ContentType
from aiogram.filters import Command
from aiogram import F, Router

from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from keyboards import inline_kb, reply_kb

class Registration(StatesGroup):
#–ü–æ–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    name = State()
    university = State()

user_router = Router()

@user_router.message(Command('start'))
async def start_command(message: Message):
    await message.answer(
        text='–¢–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–µ–º!üéâ–°–Ω–∞—á–∞–ª–æ –Ω—É–∂–Ω –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é(–∫–Ω–æ–ø–∫–∞ –≤–∏–Ω–∏–∑—É), –≥–¥–µ –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ –§–ò–û –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—éüè´.',
        reply_markup=reply_kb.registration_keyboard
        )

@user_router.message(F.text == '–•–æ—á—É –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
async def registration(message: Message, state: FSMContext):
    await state.set_state(Registration.name)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')

#–°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@user_router.message(Registration.name)
async def registr_name(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.university)
    await message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è –ø–æ–ª–Ω–æ—Å—Ç—å—é.')
    
@user_router.message(Registration.university)
async def registr_university(message:Message, state: FSMContext):
    await state.update_data(university=message.text)
    data = await state.get_data()
    await message.answer(
        text = f"–í–∞—Å –∑–æ–≤—É—Ç: {data['name']}\n–í–∞—à–µ —É—á–µ–±–Ω–æ–µ –∑–∞–≤–µ–¥–µ–Ω–∏–µ: {data['university']}.\n–•–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ?",
        reply_markup=inline_kb.confirm_kb
        )    
    await state.clear()#–ù–∞–¥–æ –Ω–µ –æ—á–∏—â–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫-—Ç–æ

#–≠—Ç–æ –∫–∞—Å—Ç—ã–ª—å –≥–æ–≤—Ä–∏—Ç –ñ–µ–Ω—è –∫–∞–∫ –∏—Å–ø—Ä–∞–≤–∏—Ç—å —è –Ω–µ –µ–±—É. –ù–∞–¥–æ –∫–∞–∫-—Ç–æ –Ω–µ –æ—á–∏—â–∞—å —Å–æ—Ç—Å–æ—è—Ç
@user_router.callback_query(F.data == 'change_data')
async def change_user_data(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Registration.name)
    await callback.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ—â–µ —Ä–∞–∑')
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª.')

@user_router.callback_query(F.data == 'confirm_data')
async def confirm_user_data(callback: CallbackQuery, state: FSMContext):
    #–ö–û–î –ö–û–¢–†–´–ô –û–¢–ü–†–ê–í–õ–Ø–ï–¢ –î–ê–ù–ù–´–ï –ù–ê PG –°–ï–†–í–ï–†
    pass
    #await state.clear()# –¢–æ–ª—å–∫–æ —Ç—É—Ç –æ—á–∏—â–∞–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ